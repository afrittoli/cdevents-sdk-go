// Code generated by tools/generator. DO NOT EDIT.
{{if .IsTestData}}
//go:build testonly
{{end}}

/*
Copyright 2024 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api

import (
{{- if not .IsTestData}}
  "fmt"
{{- end}}
  "encoding/json"

  jsonschema "github.com/santhosh-tekuri/jsonschema/v6"
)

{{- if not .IsTestData}}
type SchemaDB map[string]*jsonschema.Schema
{{- end}}

var (
    // All compiled schemas by Id
    {{if .IsTestData}}Test{{end}}CompiledSchemas SchemaDB

    // All schemas as string by Id
    {{if .IsTestData}}Test{{end}}SchemasById = map[string]string{
{{- range $id, $data := .Data }}
    "{{ $id }}": `{{ printf "%s" $data }}`,
{{- end }}
}
)

func init() {
  compiler, err := new{{if .IsTestData}}Test{{end}}JsonSchemaCompiler()
  panicOnError(err)
  {{if .IsTestData}}Test{{end}}CompiledSchemas = make(map[string]*jsonschema.Schema)
  {{- if .IsTestData}}
  // For tests load non-test schemas first to cover links and custom
  for url, _ := range SchemasById {
    sch, err := compiler.Compile(url)
    panicOnError(err)
    TestCompiledSchemas[url] = sch
  }
  {{- end}}
  for url, _ := range {{if .IsTestData}}Test{{end}}SchemasById {
    sch, err := compiler.Compile(url)
    panicOnError(err)
    {{if .IsTestData}}Test{{end}}CompiledSchemas[url] = sch
  }
}

{{- if not .IsTestData}}
func (db SchemaDB) GetBySpecSubjectPredicate(specVersion, subject, predicate string) (string, *jsonschema.Schema, error) {
  id := fmt.Sprintf(CDEventsSchemaURLTemplate, specVersion, subject, predicate)
  if schemaString, found := db[id]; found {
    return id, schemaString, nil
  }
  return "", nil, fmt.Errorf("event %s/%s not found for spec %s in local schema DB", specVersion, subject, predicate)
}
{{- end}}

func new{{if .IsTestData}}Test{{end}}JsonSchemaCompiler() (*jsonschema.Compiler, error) {
  {{- if .IsTestData}}
  c, err := newJsonSchemaCompiler()
  if err != nil {
    return nil, err
  }
  {{- else}}
  c := jsonschema.NewCompiler()
  {{- end}}
  for url, content := range {{if .IsTestData}}Test{{end}}SchemasById {
    var loaded map[string]interface{}
    err := json.Unmarshal([]byte(content), &loaded)
    if err != nil {
      return nil, err
    }
    if err:=c.AddResource(url, loaded); err!=nil {
        return nil, err
    }
  }
  return c, nil
}
