// Code generated by tools/generator. DO NOT EDIT.

/*
Copyright 2023 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api

import "fmt"

var CDEventsTypes = []CDEvent{
	&ArtifactPackagedEvent{},
	&ArtifactPublishedEvent{},
	&BranchCreatedEvent{},
	&BranchDeletedEvent{},
	&BuildFinishedEvent{},
	&BuildQueuedEvent{},
	&BuildStartedEvent{},
	&ChangeAbandonedEvent{},
	&ChangeCreatedEvent{},
	&ChangeMergedEvent{},
	&ChangeReviewedEvent{},
	&ChangeUpdatedEvent{},
	&EnvironmentCreatedEvent{},
	&EnvironmentDeletedEvent{},
	&EnvironmentModifiedEvent{},
	&IncidentDetectedEvent{},
	&IncidentReportedEvent{},
	&IncidentResolvedEvent{},
	&PipelineRunFinishedEvent{},
	&PipelineRunQueuedEvent{},
	&PipelineRunStartedEvent{},
	&RepositoryCreatedEvent{},
	&RepositoryDeletedEvent{},
	&RepositoryModifiedEvent{},
	&ServiceDeployedEvent{},
	&ServicePublishedEvent{},
	&ServiceRemovedEvent{},
	&ServiceRolledbackEvent{},
	&ServiceUpgradedEvent{},
	&TaskRunFinishedEvent{},
	&TaskRunStartedEvent{},
	&TestCaseFinishedEvent{},
	&TestCaseQueuedEvent{},
	&TestCaseStartedEvent{},
	&TestSuiteFinishedEvent{},
	&TestSuiteStartedEvent{},
}

func init() {
	// Set up CDEventsByUnversionedTypes for convenience
	CDEventsByUnversionedTypes = make(map[string]CDEvent)
	for _, event := range CDEventsTypes {
		CDEventsByUnversionedTypes[event.GetType().UnversionedString()] = event
	}
}

// NewCDEvent produces a CDEvent by type
// This function can be used by users but it's meant mainly for testing purposes
func NewCDEvent(eventType CDEventType) (CDEvent, error) {
	switch eventType {
	case ArtifactPackagedEventV1:
		return NewArtifactPackagedEvent()
	case ArtifactPublishedEventV1:
		return NewArtifactPublishedEvent()
	case BranchCreatedEventV1:
		return NewBranchCreatedEvent()
	case BranchDeletedEventV1:
		return NewBranchDeletedEvent()
	case BuildFinishedEventV1:
		return NewBuildFinishedEvent()
	case BuildQueuedEventV1:
		return NewBuildQueuedEvent()
	case BuildStartedEventV1:
		return NewBuildStartedEvent()
	case ChangeAbandonedEventV1:
		return NewChangeAbandonedEvent()
	case ChangeCreatedEventV1:
		return NewChangeCreatedEvent()
	case ChangeMergedEventV1:
		return NewChangeMergedEvent()
	case ChangeReviewedEventV1:
		return NewChangeReviewedEvent()
	case ChangeUpdatedEventV1:
		return NewChangeUpdatedEvent()
	case EnvironmentCreatedEventV1:
		return NewEnvironmentCreatedEvent()
	case EnvironmentDeletedEventV1:
		return NewEnvironmentDeletedEvent()
	case EnvironmentModifiedEventV1:
		return NewEnvironmentModifiedEvent()
	case IncidentDetectedEventV1:
		return NewIncidentDetectedEvent()
	case IncidentReportedEventV1:
		return NewIncidentReportedEvent()
	case IncidentResolvedEventV1:
		return NewIncidentResolvedEvent()
	case PipelineRunFinishedEventV1:
		return NewPipelineRunFinishedEvent()
	case PipelineRunQueuedEventV1:
		return NewPipelineRunQueuedEvent()
	case PipelineRunStartedEventV1:
		return NewPipelineRunStartedEvent()
	case RepositoryCreatedEventV1:
		return NewRepositoryCreatedEvent()
	case RepositoryDeletedEventV1:
		return NewRepositoryDeletedEvent()
	case RepositoryModifiedEventV1:
		return NewRepositoryModifiedEvent()
	case ServiceDeployedEventV1:
		return NewServiceDeployedEvent()
	case ServicePublishedEventV1:
		return NewServicePublishedEvent()
	case ServiceRemovedEventV1:
		return NewServiceRemovedEvent()
	case ServiceRolledbackEventV1:
		return NewServiceRolledbackEvent()
	case ServiceUpgradedEventV1:
		return NewServiceUpgradedEvent()
	case TaskRunFinishedEventV1:
		return NewTaskRunFinishedEvent()
	case TaskRunStartedEventV1:
		return NewTaskRunStartedEvent()
	case TestCaseFinishedEventV1:
		return NewTestCaseFinishedEvent()
	case TestCaseQueuedEventV1:
		return NewTestCaseQueuedEvent()
	case TestCaseStartedEventV1:
		return NewTestCaseStartedEvent()
	case TestSuiteFinishedEventV1:
		return NewTestSuiteFinishedEvent()
	case TestSuiteStartedEventV1:
		return NewTestSuiteStartedEvent()
	default:
		return nil, fmt.Errorf("event %v not supported", eventType)
	}
}
