// Code generated by tools/generator. DO NOT EDIT.

/*
Copyright 2023 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api

import "fmt"

var CDEventsTypes = []CDEvent{
	&ArtifactPackagedEventV0_1_1{},
	&ArtifactPublishedEventV0_1_1{},
	&ArtifactSignedEventV0_1_0{},
	&BranchCreatedEventV0_1_2{},
	&BranchDeletedEventV0_1_2{},
	&BuildFinishedEventV0_1_1{},
	&BuildQueuedEventV0_1_1{},
	&BuildStartedEventV0_1_1{},
	&ChangeAbandonedEventV0_1_2{},
	&ChangeCreatedEventV0_1_2{},
	&ChangeMergedEventV0_1_2{},
	&ChangeReviewedEventV0_1_2{},
	&ChangeUpdatedEventV0_1_2{},
	&EnvironmentCreatedEventV0_1_1{},
	&EnvironmentDeletedEventV0_1_1{},
	&EnvironmentModifiedEventV0_1_1{},
	&IncidentDetectedEventV0_1_0{},
	&IncidentReportedEventV0_1_0{},
	&IncidentResolvedEventV0_1_0{},
	&PipelineRunFinishedEventV0_1_1{},
	&PipelineRunQueuedEventV0_1_1{},
	&PipelineRunStartedEventV0_1_1{},
	&RepositoryCreatedEventV0_1_1{},
	&RepositoryDeletedEventV0_1_1{},
	&RepositoryModifiedEventV0_1_1{},
	&ServiceDeployedEventV0_1_1{},
	&ServicePublishedEventV0_1_1{},
	&ServiceRemovedEventV0_1_1{},
	&ServiceRolledbackEventV0_1_1{},
	&ServiceUpgradedEventV0_1_1{},
	&TaskRunFinishedEventV0_1_1{},
	&TaskRunStartedEventV0_1_1{},
	&TestCaseRunFinishedEventV0_1_0{},
	&TestCaseRunQueuedEventV0_1_0{},
	&TestCaseRunStartedEventV0_1_0{},
	&TestOutputPublishedEventV0_1_0{},
	&TestSuiteRunFinishedEventV0_1_0{},
	&TestSuiteRunQueuedEventV0_1_0{},
	&TestSuiteRunStartedEventV0_1_0{},
}

func init() {
	// Set up CDEventsByUnversionedTypes for convenience
	CDEventsByUnversionedTypes = make(map[string]CDEvent)
	for _, event := range CDEventsTypes {
		CDEventsByUnversionedTypes[event.GetType().UnversionedString()] = event
	}
}

// NewCDEvent produces a CDEvent by type
// This function can be used by users but it's meant mainly for testing purposes
func NewCDEvent(eventType, specVersion string) (CDEvent, error) {
	switch eventType {
	case ArtifactPackagedEventTypeV0_1_1.String():
		return NewArtifactPackagedEventV0_1_1(specVersion)
	case ArtifactPublishedEventTypeV0_1_1.String():
		return NewArtifactPublishedEventV0_1_1(specVersion)
	case ArtifactSignedEventTypeV0_1_0.String():
		return NewArtifactSignedEventV0_1_0(specVersion)
	case BranchCreatedEventTypeV0_1_2.String():
		return NewBranchCreatedEventV0_1_2(specVersion)
	case BranchDeletedEventTypeV0_1_2.String():
		return NewBranchDeletedEventV0_1_2(specVersion)
	case BuildFinishedEventTypeV0_1_1.String():
		return NewBuildFinishedEventV0_1_1(specVersion)
	case BuildQueuedEventTypeV0_1_1.String():
		return NewBuildQueuedEventV0_1_1(specVersion)
	case BuildStartedEventTypeV0_1_1.String():
		return NewBuildStartedEventV0_1_1(specVersion)
	case ChangeAbandonedEventTypeV0_1_2.String():
		return NewChangeAbandonedEventV0_1_2(specVersion)
	case ChangeCreatedEventTypeV0_1_2.String():
		return NewChangeCreatedEventV0_1_2(specVersion)
	case ChangeMergedEventTypeV0_1_2.String():
		return NewChangeMergedEventV0_1_2(specVersion)
	case ChangeReviewedEventTypeV0_1_2.String():
		return NewChangeReviewedEventV0_1_2(specVersion)
	case ChangeUpdatedEventTypeV0_1_2.String():
		return NewChangeUpdatedEventV0_1_2(specVersion)
	case EnvironmentCreatedEventTypeV0_1_1.String():
		return NewEnvironmentCreatedEventV0_1_1(specVersion)
	case EnvironmentDeletedEventTypeV0_1_1.String():
		return NewEnvironmentDeletedEventV0_1_1(specVersion)
	case EnvironmentModifiedEventTypeV0_1_1.String():
		return NewEnvironmentModifiedEventV0_1_1(specVersion)
	case IncidentDetectedEventTypeV0_1_0.String():
		return NewIncidentDetectedEventV0_1_0(specVersion)
	case IncidentReportedEventTypeV0_1_0.String():
		return NewIncidentReportedEventV0_1_0(specVersion)
	case IncidentResolvedEventTypeV0_1_0.String():
		return NewIncidentResolvedEventV0_1_0(specVersion)
	case PipelineRunFinishedEventTypeV0_1_1.String():
		return NewPipelineRunFinishedEventV0_1_1(specVersion)
	case PipelineRunQueuedEventTypeV0_1_1.String():
		return NewPipelineRunQueuedEventV0_1_1(specVersion)
	case PipelineRunStartedEventTypeV0_1_1.String():
		return NewPipelineRunStartedEventV0_1_1(specVersion)
	case RepositoryCreatedEventTypeV0_1_1.String():
		return NewRepositoryCreatedEventV0_1_1(specVersion)
	case RepositoryDeletedEventTypeV0_1_1.String():
		return NewRepositoryDeletedEventV0_1_1(specVersion)
	case RepositoryModifiedEventTypeV0_1_1.String():
		return NewRepositoryModifiedEventV0_1_1(specVersion)
	case ServiceDeployedEventTypeV0_1_1.String():
		return NewServiceDeployedEventV0_1_1(specVersion)
	case ServicePublishedEventTypeV0_1_1.String():
		return NewServicePublishedEventV0_1_1(specVersion)
	case ServiceRemovedEventTypeV0_1_1.String():
		return NewServiceRemovedEventV0_1_1(specVersion)
	case ServiceRolledbackEventTypeV0_1_1.String():
		return NewServiceRolledbackEventV0_1_1(specVersion)
	case ServiceUpgradedEventTypeV0_1_1.String():
		return NewServiceUpgradedEventV0_1_1(specVersion)
	case TaskRunFinishedEventTypeV0_1_1.String():
		return NewTaskRunFinishedEventV0_1_1(specVersion)
	case TaskRunStartedEventTypeV0_1_1.String():
		return NewTaskRunStartedEventV0_1_1(specVersion)
	case TestCaseRunFinishedEventTypeV0_1_0.String():
		return NewTestCaseRunFinishedEventV0_1_0(specVersion)
	case TestCaseRunQueuedEventTypeV0_1_0.String():
		return NewTestCaseRunQueuedEventV0_1_0(specVersion)
	case TestCaseRunStartedEventTypeV0_1_0.String():
		return NewTestCaseRunStartedEventV0_1_0(specVersion)
	case TestOutputPublishedEventTypeV0_1_0.String():
		return NewTestOutputPublishedEventV0_1_0(specVersion)
	case TestSuiteRunFinishedEventTypeV0_1_0.String():
		return NewTestSuiteRunFinishedEventV0_1_0(specVersion)
	case TestSuiteRunQueuedEventTypeV0_1_0.String():
		return NewTestSuiteRunQueuedEventV0_1_0(specVersion)
	case TestSuiteRunStartedEventTypeV0_1_0.String():
		return NewTestSuiteRunStartedEventV0_1_0(specVersion)
	default:
		return nil, fmt.Errorf("event %v not supported", eventType)
	}
}
