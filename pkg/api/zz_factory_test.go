// Code generated by tools/generator. DO NOT EDIT.

/*
Copyright 2023 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api_test

import "github.com/cdevents/sdk-go/pkg/api"

func init() {
	tests = []testNewCDEventType{}
	tests = append(tests, testNewCDEventType{
		name:      "artifact packaged",
		eventType: api.ArtifactPackagedEventTypeV0_1_1.String(),
		expectedEvent: &api.ArtifactPackagedEventV0_1_1{
			Context: api.Context{
				Type:      api.ArtifactPackagedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ArtifactPackagedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "artifact published",
		eventType: api.ArtifactPublishedEventTypeV0_1_1.String(),
		expectedEvent: &api.ArtifactPublishedEventV0_1_1{
			Context: api.Context{
				Type:      api.ArtifactPublishedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ArtifactPublishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "artifact signed",
		eventType: api.ArtifactSignedEventTypeV0_1_0.String(),
		expectedEvent: &api.ArtifactSignedEventV0_1_0{
			Context: api.Context{
				Type:      api.ArtifactSignedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ArtifactSignedSubject{
				SubjectBase: api.SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "branch created",
		eventType: api.BranchCreatedEventTypeV0_1_2.String(),
		expectedEvent: &api.BranchCreatedEventV0_1_2{
			Context: api.Context{
				Type:      api.BranchCreatedEventTypeV0_1_2,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.BranchCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "branch",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "branch deleted",
		eventType: api.BranchDeletedEventTypeV0_1_2.String(),
		expectedEvent: &api.BranchDeletedEventV0_1_2{
			Context: api.Context{
				Type:      api.BranchDeletedEventTypeV0_1_2,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.BranchDeletedSubject{
				SubjectBase: api.SubjectBase{
					Type: "branch",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build finished",
		eventType: api.BuildFinishedEventTypeV0_1_1.String(),
		expectedEvent: &api.BuildFinishedEventV0_1_1{
			Context: api.Context{
				Type:      api.BuildFinishedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.BuildFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build queued",
		eventType: api.BuildQueuedEventTypeV0_1_1.String(),
		expectedEvent: &api.BuildQueuedEventV0_1_1{
			Context: api.Context{
				Type:      api.BuildQueuedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.BuildQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build started",
		eventType: api.BuildStartedEventTypeV0_1_1.String(),
		expectedEvent: &api.BuildStartedEventV0_1_1{
			Context: api.Context{
				Type:      api.BuildStartedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.BuildStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change abandoned",
		eventType: api.ChangeAbandonedEventTypeV0_1_2.String(),
		expectedEvent: &api.ChangeAbandonedEventV0_1_2{
			Context: api.Context{
				Type:      api.ChangeAbandonedEventTypeV0_1_2,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ChangeAbandonedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change created",
		eventType: api.ChangeCreatedEventTypeV0_1_2.String(),
		expectedEvent: &api.ChangeCreatedEventV0_1_2{
			Context: api.Context{
				Type:      api.ChangeCreatedEventTypeV0_1_2,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ChangeCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change merged",
		eventType: api.ChangeMergedEventTypeV0_1_2.String(),
		expectedEvent: &api.ChangeMergedEventV0_1_2{
			Context: api.Context{
				Type:      api.ChangeMergedEventTypeV0_1_2,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ChangeMergedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change reviewed",
		eventType: api.ChangeReviewedEventTypeV0_1_2.String(),
		expectedEvent: &api.ChangeReviewedEventV0_1_2{
			Context: api.Context{
				Type:      api.ChangeReviewedEventTypeV0_1_2,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ChangeReviewedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change updated",
		eventType: api.ChangeUpdatedEventTypeV0_1_2.String(),
		expectedEvent: &api.ChangeUpdatedEventV0_1_2{
			Context: api.Context{
				Type:      api.ChangeUpdatedEventTypeV0_1_2,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ChangeUpdatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment created",
		eventType: api.EnvironmentCreatedEventTypeV0_1_1.String(),
		expectedEvent: &api.EnvironmentCreatedEventV0_1_1{
			Context: api.Context{
				Type:      api.EnvironmentCreatedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.EnvironmentCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment deleted",
		eventType: api.EnvironmentDeletedEventTypeV0_1_1.String(),
		expectedEvent: &api.EnvironmentDeletedEventV0_1_1{
			Context: api.Context{
				Type:      api.EnvironmentDeletedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.EnvironmentDeletedSubject{
				SubjectBase: api.SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment modified",
		eventType: api.EnvironmentModifiedEventTypeV0_1_1.String(),
		expectedEvent: &api.EnvironmentModifiedEventV0_1_1{
			Context: api.Context{
				Type:      api.EnvironmentModifiedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.EnvironmentModifiedSubject{
				SubjectBase: api.SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident detected",
		eventType: api.IncidentDetectedEventTypeV0_1_0.String(),
		expectedEvent: &api.IncidentDetectedEventV0_1_0{
			Context: api.Context{
				Type:      api.IncidentDetectedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.IncidentDetectedSubject{
				SubjectBase: api.SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident reported",
		eventType: api.IncidentReportedEventTypeV0_1_0.String(),
		expectedEvent: &api.IncidentReportedEventV0_1_0{
			Context: api.Context{
				Type:      api.IncidentReportedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.IncidentReportedSubject{
				SubjectBase: api.SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident resolved",
		eventType: api.IncidentResolvedEventTypeV0_1_0.String(),
		expectedEvent: &api.IncidentResolvedEventV0_1_0{
			Context: api.Context{
				Type:      api.IncidentResolvedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.IncidentResolvedSubject{
				SubjectBase: api.SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun finished",
		eventType: api.PipelineRunFinishedEventTypeV0_1_1.String(),
		expectedEvent: &api.PipelineRunFinishedEventV0_1_1{
			Context: api.Context{
				Type:      api.PipelineRunFinishedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.PipelineRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun queued",
		eventType: api.PipelineRunQueuedEventTypeV0_1_1.String(),
		expectedEvent: &api.PipelineRunQueuedEventV0_1_1{
			Context: api.Context{
				Type:      api.PipelineRunQueuedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.PipelineRunQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun started",
		eventType: api.PipelineRunStartedEventTypeV0_1_1.String(),
		expectedEvent: &api.PipelineRunStartedEventV0_1_1{
			Context: api.Context{
				Type:      api.PipelineRunStartedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.PipelineRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository created",
		eventType: api.RepositoryCreatedEventTypeV0_1_1.String(),
		expectedEvent: &api.RepositoryCreatedEventV0_1_1{
			Context: api.Context{
				Type:      api.RepositoryCreatedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.RepositoryCreatedSubject{
				SubjectBase: api.SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository deleted",
		eventType: api.RepositoryDeletedEventTypeV0_1_1.String(),
		expectedEvent: &api.RepositoryDeletedEventV0_1_1{
			Context: api.Context{
				Type:      api.RepositoryDeletedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.RepositoryDeletedSubject{
				SubjectBase: api.SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository modified",
		eventType: api.RepositoryModifiedEventTypeV0_1_1.String(),
		expectedEvent: &api.RepositoryModifiedEventV0_1_1{
			Context: api.Context{
				Type:      api.RepositoryModifiedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.RepositoryModifiedSubject{
				SubjectBase: api.SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service deployed",
		eventType: api.ServiceDeployedEventTypeV0_1_1.String(),
		expectedEvent: &api.ServiceDeployedEventV0_1_1{
			Context: api.Context{
				Type:      api.ServiceDeployedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ServiceDeployedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service published",
		eventType: api.ServicePublishedEventTypeV0_1_1.String(),
		expectedEvent: &api.ServicePublishedEventV0_1_1{
			Context: api.Context{
				Type:      api.ServicePublishedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ServicePublishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service removed",
		eventType: api.ServiceRemovedEventTypeV0_1_1.String(),
		expectedEvent: &api.ServiceRemovedEventV0_1_1{
			Context: api.Context{
				Type:      api.ServiceRemovedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ServiceRemovedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service rolledback",
		eventType: api.ServiceRolledbackEventTypeV0_1_1.String(),
		expectedEvent: &api.ServiceRolledbackEventV0_1_1{
			Context: api.Context{
				Type:      api.ServiceRolledbackEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ServiceRolledbackSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service upgraded",
		eventType: api.ServiceUpgradedEventTypeV0_1_1.String(),
		expectedEvent: &api.ServiceUpgradedEventV0_1_1{
			Context: api.Context{
				Type:      api.ServiceUpgradedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.ServiceUpgradedSubject{
				SubjectBase: api.SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "taskrun finished",
		eventType: api.TaskRunFinishedEventTypeV0_1_1.String(),
		expectedEvent: &api.TaskRunFinishedEventV0_1_1{
			Context: api.Context{
				Type:      api.TaskRunFinishedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TaskRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "taskRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "taskrun started",
		eventType: api.TaskRunStartedEventTypeV0_1_1.String(),
		expectedEvent: &api.TaskRunStartedEventV0_1_1{
			Context: api.Context{
				Type:      api.TaskRunStartedEventTypeV0_1_1,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TaskRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "taskRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcaserun finished",
		eventType: api.TestCaseRunFinishedEventTypeV0_1_0.String(),
		expectedEvent: &api.TestCaseRunFinishedEventV0_1_0{
			Context: api.Context{
				Type:      api.TestCaseRunFinishedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TestCaseRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testCaseRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcaserun queued",
		eventType: api.TestCaseRunQueuedEventTypeV0_1_0.String(),
		expectedEvent: &api.TestCaseRunQueuedEventV0_1_0{
			Context: api.Context{
				Type:      api.TestCaseRunQueuedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TestCaseRunQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testCaseRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcaserun started",
		eventType: api.TestCaseRunStartedEventTypeV0_1_0.String(),
		expectedEvent: &api.TestCaseRunStartedEventV0_1_0{
			Context: api.Context{
				Type:      api.TestCaseRunStartedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TestCaseRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testCaseRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testoutput published",
		eventType: api.TestOutputPublishedEventTypeV0_1_0.String(),
		expectedEvent: &api.TestOutputPublishedEventV0_1_0{
			Context: api.Context{
				Type:      api.TestOutputPublishedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TestOutputPublishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testOutput",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuiterun finished",
		eventType: api.TestSuiteRunFinishedEventTypeV0_1_0.String(),
		expectedEvent: &api.TestSuiteRunFinishedEventV0_1_0{
			Context: api.Context{
				Type:      api.TestSuiteRunFinishedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TestSuiteRunFinishedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testSuiteRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuiterun queued",
		eventType: api.TestSuiteRunQueuedEventTypeV0_1_0.String(),
		expectedEvent: &api.TestSuiteRunQueuedEventV0_1_0{
			Context: api.Context{
				Type:      api.TestSuiteRunQueuedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TestSuiteRunQueuedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testSuiteRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuiterun started",
		eventType: api.TestSuiteRunStartedEventTypeV0_1_0.String(),
		expectedEvent: &api.TestSuiteRunStartedEventV0_1_0{
			Context: api.Context{
				Type:      api.TestSuiteRunStartedEventTypeV0_1_0,
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   api.CDEventsSpecVersion,
			},
			Subject: api.TestSuiteRunStartedSubject{
				SubjectBase: api.SubjectBase{
					Type: "testSuiteRun",
				},
			},
		},
	})
}
