// Code generated by tools/generator. DO NOT EDIT.

/*
Copyright 2023 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package api

func init() {
	tests = []testNewCDEventType{}
	tests = append(tests, testNewCDEventType{
		name:      "artifact packaged",
		eventType: ArtifactPackagedEventV1.String(),
		expectedEvent: &ArtifactPackagedEvent{
			Context: Context{
				Type:      ArtifactPackagedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ArtifactPackagedSubject{
				SubjectBase: SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "artifact published",
		eventType: ArtifactPublishedEventV1.String(),
		expectedEvent: &ArtifactPublishedEvent{
			Context: Context{
				Type:      ArtifactPublishedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ArtifactPublishedSubject{
				SubjectBase: SubjectBase{
					Type: "artifact",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "branch created",
		eventType: BranchCreatedEventV1.String(),
		expectedEvent: &BranchCreatedEvent{
			Context: Context{
				Type:      BranchCreatedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: BranchCreatedSubject{
				SubjectBase: SubjectBase{
					Type: "branch",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "branch deleted",
		eventType: BranchDeletedEventV1.String(),
		expectedEvent: &BranchDeletedEvent{
			Context: Context{
				Type:      BranchDeletedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: BranchDeletedSubject{
				SubjectBase: SubjectBase{
					Type: "branch",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build finished",
		eventType: BuildFinishedEventV1.String(),
		expectedEvent: &BuildFinishedEvent{
			Context: Context{
				Type:      BuildFinishedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: BuildFinishedSubject{
				SubjectBase: SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build queued",
		eventType: BuildQueuedEventV1.String(),
		expectedEvent: &BuildQueuedEvent{
			Context: Context{
				Type:      BuildQueuedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: BuildQueuedSubject{
				SubjectBase: SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "build started",
		eventType: BuildStartedEventV1.String(),
		expectedEvent: &BuildStartedEvent{
			Context: Context{
				Type:      BuildStartedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: BuildStartedSubject{
				SubjectBase: SubjectBase{
					Type: "build",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change abandoned",
		eventType: ChangeAbandonedEventV1.String(),
		expectedEvent: &ChangeAbandonedEvent{
			Context: Context{
				Type:      ChangeAbandonedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ChangeAbandonedSubject{
				SubjectBase: SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change created",
		eventType: ChangeCreatedEventV1.String(),
		expectedEvent: &ChangeCreatedEvent{
			Context: Context{
				Type:      ChangeCreatedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ChangeCreatedSubject{
				SubjectBase: SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change merged",
		eventType: ChangeMergedEventV1.String(),
		expectedEvent: &ChangeMergedEvent{
			Context: Context{
				Type:      ChangeMergedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ChangeMergedSubject{
				SubjectBase: SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change reviewed",
		eventType: ChangeReviewedEventV1.String(),
		expectedEvent: &ChangeReviewedEvent{
			Context: Context{
				Type:      ChangeReviewedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ChangeReviewedSubject{
				SubjectBase: SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "change updated",
		eventType: ChangeUpdatedEventV1.String(),
		expectedEvent: &ChangeUpdatedEvent{
			Context: Context{
				Type:      ChangeUpdatedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ChangeUpdatedSubject{
				SubjectBase: SubjectBase{
					Type: "change",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment created",
		eventType: EnvironmentCreatedEventV1.String(),
		expectedEvent: &EnvironmentCreatedEvent{
			Context: Context{
				Type:      EnvironmentCreatedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: EnvironmentCreatedSubject{
				SubjectBase: SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment deleted",
		eventType: EnvironmentDeletedEventV1.String(),
		expectedEvent: &EnvironmentDeletedEvent{
			Context: Context{
				Type:      EnvironmentDeletedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: EnvironmentDeletedSubject{
				SubjectBase: SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "environment modified",
		eventType: EnvironmentModifiedEventV1.String(),
		expectedEvent: &EnvironmentModifiedEvent{
			Context: Context{
				Type:      EnvironmentModifiedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: EnvironmentModifiedSubject{
				SubjectBase: SubjectBase{
					Type: "environment",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident detected",
		eventType: IncidentDetectedEventV1.String(),
		expectedEvent: &IncidentDetectedEvent{
			Context: Context{
				Type:      IncidentDetectedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: IncidentDetectedSubject{
				SubjectBase: SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident reported",
		eventType: IncidentReportedEventV1.String(),
		expectedEvent: &IncidentReportedEvent{
			Context: Context{
				Type:      IncidentReportedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: IncidentReportedSubject{
				SubjectBase: SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "incident resolved",
		eventType: IncidentResolvedEventV1.String(),
		expectedEvent: &IncidentResolvedEvent{
			Context: Context{
				Type:      IncidentResolvedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: IncidentResolvedSubject{
				SubjectBase: SubjectBase{
					Type: "incident",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun finished",
		eventType: PipelineRunFinishedEventV1.String(),
		expectedEvent: &PipelineRunFinishedEvent{
			Context: Context{
				Type:      PipelineRunFinishedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: PipelineRunFinishedSubject{
				SubjectBase: SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun queued",
		eventType: PipelineRunQueuedEventV1.String(),
		expectedEvent: &PipelineRunQueuedEvent{
			Context: Context{
				Type:      PipelineRunQueuedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: PipelineRunQueuedSubject{
				SubjectBase: SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "pipelinerun started",
		eventType: PipelineRunStartedEventV1.String(),
		expectedEvent: &PipelineRunStartedEvent{
			Context: Context{
				Type:      PipelineRunStartedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: PipelineRunStartedSubject{
				SubjectBase: SubjectBase{
					Type: "pipelineRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository created",
		eventType: RepositoryCreatedEventV1.String(),
		expectedEvent: &RepositoryCreatedEvent{
			Context: Context{
				Type:      RepositoryCreatedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: RepositoryCreatedSubject{
				SubjectBase: SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository deleted",
		eventType: RepositoryDeletedEventV1.String(),
		expectedEvent: &RepositoryDeletedEvent{
			Context: Context{
				Type:      RepositoryDeletedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: RepositoryDeletedSubject{
				SubjectBase: SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "repository modified",
		eventType: RepositoryModifiedEventV1.String(),
		expectedEvent: &RepositoryModifiedEvent{
			Context: Context{
				Type:      RepositoryModifiedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: RepositoryModifiedSubject{
				SubjectBase: SubjectBase{
					Type: "repository",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service deployed",
		eventType: ServiceDeployedEventV1.String(),
		expectedEvent: &ServiceDeployedEvent{
			Context: Context{
				Type:      ServiceDeployedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ServiceDeployedSubject{
				SubjectBase: SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service published",
		eventType: ServicePublishedEventV1.String(),
		expectedEvent: &ServicePublishedEvent{
			Context: Context{
				Type:      ServicePublishedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ServicePublishedSubject{
				SubjectBase: SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service removed",
		eventType: ServiceRemovedEventV1.String(),
		expectedEvent: &ServiceRemovedEvent{
			Context: Context{
				Type:      ServiceRemovedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ServiceRemovedSubject{
				SubjectBase: SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service rolledback",
		eventType: ServiceRolledbackEventV1.String(),
		expectedEvent: &ServiceRolledbackEvent{
			Context: Context{
				Type:      ServiceRolledbackEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ServiceRolledbackSubject{
				SubjectBase: SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "service upgraded",
		eventType: ServiceUpgradedEventV1.String(),
		expectedEvent: &ServiceUpgradedEvent{
			Context: Context{
				Type:      ServiceUpgradedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: ServiceUpgradedSubject{
				SubjectBase: SubjectBase{
					Type: "service",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "taskrun finished",
		eventType: TaskRunFinishedEventV1.String(),
		expectedEvent: &TaskRunFinishedEvent{
			Context: Context{
				Type:      TaskRunFinishedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: TaskRunFinishedSubject{
				SubjectBase: SubjectBase{
					Type: "taskRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "taskrun started",
		eventType: TaskRunStartedEventV1.String(),
		expectedEvent: &TaskRunStartedEvent{
			Context: Context{
				Type:      TaskRunStartedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: TaskRunStartedSubject{
				SubjectBase: SubjectBase{
					Type: "taskRun",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcase finished",
		eventType: TestCaseFinishedEventV1.String(),
		expectedEvent: &TestCaseFinishedEvent{
			Context: Context{
				Type:      TestCaseFinishedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: TestCaseFinishedSubject{
				SubjectBase: SubjectBase{
					Type: "testCase",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcase queued",
		eventType: TestCaseQueuedEventV1.String(),
		expectedEvent: &TestCaseQueuedEvent{
			Context: Context{
				Type:      TestCaseQueuedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: TestCaseQueuedSubject{
				SubjectBase: SubjectBase{
					Type: "testCase",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testcase started",
		eventType: TestCaseStartedEventV1.String(),
		expectedEvent: &TestCaseStartedEvent{
			Context: Context{
				Type:      TestCaseStartedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: TestCaseStartedSubject{
				SubjectBase: SubjectBase{
					Type: "testCase",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuite finished",
		eventType: TestSuiteFinishedEventV1.String(),
		expectedEvent: &TestSuiteFinishedEvent{
			Context: Context{
				Type:      TestSuiteFinishedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: TestSuiteFinishedSubject{
				SubjectBase: SubjectBase{
					Type: "testSuite",
				},
			},
		},
	})
	tests = append(tests, testNewCDEventType{
		name:      "testsuite started",
		eventType: TestSuiteStartedEventV1.String(),
		expectedEvent: &TestSuiteStartedEvent{
			Context: Context{
				Type:      TestSuiteStartedEventV1.String(),
				Timestamp: timeNow(),
				Id:        testUUID(),
				Version:   CDEventsSpecVersion,
			},
			Subject: TestSuiteStartedSubject{
				SubjectBase: SubjectBase{
					Type: "testSuite",
				},
			},
		},
	})
}
