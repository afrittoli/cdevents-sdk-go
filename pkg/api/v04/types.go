// Code generated by tools/generator. DO NOT EDIT.

/*
Copyright 2023 The CDEvents Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

SPDX-License-Identifier: Apache-2.0
*/

package v04

import (
	"fmt"

	"github.com/cdevents/sdk-go/pkg/api"
)

var CDEventsTypes = []api.CDEventV04{
	&ArtifactDeletedEvent{},
	&ArtifactDownloadedEvent{},
	&ArtifactPackagedEvent{},
	&ArtifactPublishedEvent{},
	&ArtifactSignedEvent{},
	&BranchCreatedEvent{},
	&BranchDeletedEvent{},
	&BuildFinishedEvent{},
	&BuildQueuedEvent{},
	&BuildStartedEvent{},
	&ChangeAbandonedEvent{},
	&ChangeCreatedEvent{},
	&ChangeMergedEvent{},
	&ChangeReviewedEvent{},
	&ChangeUpdatedEvent{},
	&EnvironmentCreatedEvent{},
	&EnvironmentDeletedEvent{},
	&EnvironmentModifiedEvent{},
	&IncidentDetectedEvent{},
	&IncidentReportedEvent{},
	&IncidentResolvedEvent{},
	&PipelineRunFinishedEvent{},
	&PipelineRunQueuedEvent{},
	&PipelineRunStartedEvent{},
	&RepositoryCreatedEvent{},
	&RepositoryDeletedEvent{},
	&RepositoryModifiedEvent{},
	&ServiceDeployedEvent{},
	&ServicePublishedEvent{},
	&ServiceRemovedEvent{},
	&ServiceRolledbackEvent{},
	&ServiceUpgradedEvent{},
	&TaskRunFinishedEvent{},
	&TaskRunStartedEvent{},
	&TestCaseRunFinishedEvent{},
	&TestCaseRunQueuedEvent{},
	&TestCaseRunSkippedEvent{},
	&TestCaseRunStartedEvent{},
	&TestOutputPublishedEvent{},
	&TestSuiteRunFinishedEvent{},
	&TestSuiteRunQueuedEvent{},
	&TestSuiteRunStartedEvent{},
	&TicketClosedEvent{},
	&TicketCreatedEvent{},
	&TicketUpdatedEvent{},
}

var CDEventsByUnversionedTypes map[string]api.CDEventV04

func init() {
	// Set up CDEventsByUnversionedTypes for convenience
	CDEventsByUnversionedTypes = make(map[string]api.CDEventV04)
	for _, event := range CDEventsTypes {
		CDEventsByUnversionedTypes[event.GetType().UnversionedString()] = event
	}
}

// NewCDEvent produces a CDEvent by type
// This function can be used by users but it's meant mainly for testing purposes
func NewCDEvent(eventType, specVersion string) (api.CDEvent, error) {
	switch eventType {
	case api.ArtifactDeletedEventTypeV0_1_0.String():
		return NewArtifactDeletedEvent()
	case api.ArtifactDownloadedEventTypeV0_1_0.String():
		return NewArtifactDownloadedEvent()
	case api.ArtifactPackagedEventTypeV0_2_0.String():
		return NewArtifactPackagedEvent()
	case api.ArtifactPublishedEventTypeV0_2_0.String():
		return NewArtifactPublishedEvent()
	case api.ArtifactSignedEventTypeV0_2_0.String():
		return NewArtifactSignedEvent()
	case api.BranchCreatedEventTypeV0_2_0.String():
		return NewBranchCreatedEvent()
	case api.BranchDeletedEventTypeV0_2_0.String():
		return NewBranchDeletedEvent()
	case api.BuildFinishedEventTypeV0_2_0.String():
		return NewBuildFinishedEvent()
	case api.BuildQueuedEventTypeV0_2_0.String():
		return NewBuildQueuedEvent()
	case api.BuildStartedEventTypeV0_2_0.String():
		return NewBuildStartedEvent()
	case api.ChangeAbandonedEventTypeV0_2_0.String():
		return NewChangeAbandonedEvent()
	case api.ChangeCreatedEventTypeV0_3_0.String():
		return NewChangeCreatedEvent()
	case api.ChangeMergedEventTypeV0_2_0.String():
		return NewChangeMergedEvent()
	case api.ChangeReviewedEventTypeV0_2_0.String():
		return NewChangeReviewedEvent()
	case api.ChangeUpdatedEventTypeV0_2_0.String():
		return NewChangeUpdatedEvent()
	case api.EnvironmentCreatedEventTypeV0_2_0.String():
		return NewEnvironmentCreatedEvent()
	case api.EnvironmentDeletedEventTypeV0_2_0.String():
		return NewEnvironmentDeletedEvent()
	case api.EnvironmentModifiedEventTypeV0_2_0.String():
		return NewEnvironmentModifiedEvent()
	case api.IncidentDetectedEventTypeV0_2_0.String():
		return NewIncidentDetectedEvent()
	case api.IncidentReportedEventTypeV0_2_0.String():
		return NewIncidentReportedEvent()
	case api.IncidentResolvedEventTypeV0_2_0.String():
		return NewIncidentResolvedEvent()
	case api.PipelineRunFinishedEventTypeV0_2_0.String():
		return NewPipelineRunFinishedEvent()
	case api.PipelineRunQueuedEventTypeV0_2_0.String():
		return NewPipelineRunQueuedEvent()
	case api.PipelineRunStartedEventTypeV0_2_0.String():
		return NewPipelineRunStartedEvent()
	case api.RepositoryCreatedEventTypeV0_2_0.String():
		return NewRepositoryCreatedEvent()
	case api.RepositoryDeletedEventTypeV0_2_0.String():
		return NewRepositoryDeletedEvent()
	case api.RepositoryModifiedEventTypeV0_2_0.String():
		return NewRepositoryModifiedEvent()
	case api.ServiceDeployedEventTypeV0_2_0.String():
		return NewServiceDeployedEvent()
	case api.ServicePublishedEventTypeV0_2_0.String():
		return NewServicePublishedEvent()
	case api.ServiceRemovedEventTypeV0_2_0.String():
		return NewServiceRemovedEvent()
	case api.ServiceRolledbackEventTypeV0_2_0.String():
		return NewServiceRolledbackEvent()
	case api.ServiceUpgradedEventTypeV0_2_0.String():
		return NewServiceUpgradedEvent()
	case api.TaskRunFinishedEventTypeV0_2_0.String():
		return NewTaskRunFinishedEvent()
	case api.TaskRunStartedEventTypeV0_2_0.String():
		return NewTaskRunStartedEvent()
	case api.TestCaseRunFinishedEventTypeV0_2_0.String():
		return NewTestCaseRunFinishedEvent()
	case api.TestCaseRunQueuedEventTypeV0_2_0.String():
		return NewTestCaseRunQueuedEvent()
	case api.TestCaseRunSkippedEventTypeV0_1_0.String():
		return NewTestCaseRunSkippedEvent()
	case api.TestCaseRunStartedEventTypeV0_2_0.String():
		return NewTestCaseRunStartedEvent()
	case api.TestOutputPublishedEventTypeV0_2_0.String():
		return NewTestOutputPublishedEvent()
	case api.TestSuiteRunFinishedEventTypeV0_2_0.String():
		return NewTestSuiteRunFinishedEvent()
	case api.TestSuiteRunQueuedEventTypeV0_2_0.String():
		return NewTestSuiteRunQueuedEvent()
	case api.TestSuiteRunStartedEventTypeV0_2_0.String():
		return NewTestSuiteRunStartedEvent()
	case api.TicketClosedEventTypeV0_1_0.String():
		return NewTicketClosedEvent()
	case api.TicketCreatedEventTypeV0_1_0.String():
		return NewTicketCreatedEvent()
	case api.TicketUpdatedEventTypeV0_1_0.String():
		return NewTicketUpdatedEvent()
	default:
		return nil, fmt.Errorf("event %v not supported", eventType)
	}
}
